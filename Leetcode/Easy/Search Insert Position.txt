// Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

// You must write an algorithm with O(log n) runtime complexity.

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int size=nums.size();
        int start,end,mid;
        start=0;
        end=size-1;
 
        //optimization
        // if(target>nums[size-1]){
        //     return end+1;
        // }
        // else if(target<nums[0]){
        //     return 0;
        // }

        while(start<=end){
            
            mid=(start+end)/2;
            if(nums[mid]==target){
                return mid;
            }

            else if(nums[mid]<target){
                //search right
                start=mid+1;
            }
            else{
                //search left
                end=mid-1;
            }
        }
        //in case of insert index, we need to return the start index
        return start;       
    }
};