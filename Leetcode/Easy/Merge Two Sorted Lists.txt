// You are given the heads of two sorted linked lists list1 and list2.

// Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

// Return the head of the merged linked list.

 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if(list1 == NULL)
            return list2;
        if(list2 == NULL)
            return list1;

        ListNode *head;
        if((list1 -> val) <= (list2 -> val)){
            head=list1;
            list1=list1->next;
        }
        else{
            head=list2;
            list2=list2->next;
        }
        ListNode *p=head;


        while(list1 != NULL && list2 != NULL){

            if((list1 -> val) <= (list2 -> val)){
                p->next = list1;
                p=p->next;
                list1= list1-> next;

            }
            else {
                p->next = list2;
                p=p->next;
                list2= list2 -> next;
            }
        }
        if(!list1){
            p->next = list2;
        }
        if(!list2){
            p->next = list1;
        }

         return head;
    }
};