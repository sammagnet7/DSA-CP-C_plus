#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <climits>
#include <sstream>
#include <algorithm>

using namespace std;

/*
Rotate Image by 90 degree clockwise/ anti-clockwise

https://takeuforward.org/data-structure/rotate-image-by-90-degree/
https://takeuforward.org/data-structure/rotate-matrix-anti-clockwise-by-90-degree/
https://leetcode.com/problems/rotate-image/description/
https://www.naukri.com/code360/problems/981260?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website

Problem Statement: You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

Note:
-231 <= matrix[i][j] <= 231 - 1
You have to rotate the image in-place

Examples:

Input Matrix:
[
 [ 1, 2, 3 ]
 [ 4, 5, 6 ]
 [ 7, 8, 9 ]
]

Output Matrix:
[
 [ 7, 4, 1 ]
 [ 8, 5, 2 ]
 [ 9, 6, 3 ]
]

The output matrix is generated by rotating the elements of the input matrix in a clockwise direction.

INPUT::::::
2

3 3
1 2 3
4 5 6
7 8 9

4 4
5 1 9 11
2 4 8 10
13 3 6 7
5 14 12 16

OUTPUT::::::

7 4 1
8 5 2
9 6 3

5 13 2 5
14 3 4 1
12 6 8 9
16 7 10 11

 */

class Solution
{
public:
    // // Approach: Brute force
    // // Time: O(n*n)
    // // Space: O(n*n)
    // void rotate(vector<vector<int>> &matrix)
    // {
    //     int n = matrix.size();
    //     vector<vector<int>> rotated(n, vector<int>(n, 0));

    //     for (int i = 0; i < n; i++)
    //     {
    //         for (int j = 0; j < n; j++)
    //         {
    //             rotated[j][n - i - 1] = matrix[i][j];
    //         }
    //     }

    //     for (int i = 0; i < n; i++)
    //     {
    //         for (int j = 0; j < n; j++)
    //         {
    //             matrix[i][j] = rotated[i][j];
    //         }
    //     }
    // }

    /*Approach: Optimal. Inplace
    // Clockwise rotation:
    // here observation is that nth column from original matrix becomes nth row in rotated matrix, but the elements get reversed
    // rotated matrx = Transpose (original matrix) then reverse each ROW.
    */

    // For anti-clockwise rotation:
    // Approach: Find the transpose of the matrix. Then Reverse every COLUMN of the matrix.

    // Time: O(2*n*n)
    // Space: O(1)
    void rotate(vector<vector<int>> &matrix)
    {
        int n = matrix.size();

        // Transposing matrix
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                swap(matrix[i][j], matrix[j][i]);
            }
        }

        // Reverse each row
        for (int i = 0; i < n; i++)
        {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

int main()
{
    int t;
    cin >> t;
    cin.ignore(); // Ignore the tailing newline char
    cout << endl;

    while (t--)
    {
        int m, n;
        cin >> m >> n;
        // cin.ignore();

        vector<vector<int>> matrix(m, vector<int>(n));

        // Read the matrix
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                cin >> matrix[i][j];
            }
        }

        Solution ob;
        ob.rotate(matrix);

        // Print modified matrix
        for (const auto &row : matrix)
        {
            for (int val : row)
            {
                cout << val << " ";
            }
            cout << endl;
        }
        if (t > 0)
            cout << endl; // Print a blank line between test cases
    }
    return 0;
}